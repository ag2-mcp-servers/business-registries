# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T16:10:11+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, RootModel, constr


class LifecycleState(Enum):
    Approved = 'Approved'
    Expired = 'Expired'
    Issued = 'Issued'
    Pending_Approval = 'Pending Approval'
    Suspended = 'Suspended'


class ElectronicAddressType(Enum):
    Email = 'Email'
    Fax = 'Fax'
    Landline = 'Landline'
    Mobile = 'Mobile'
    Website = 'Website'


class ErrorDetails(BaseModel):
    code: Optional[str] = Field(
        None, description='The error code.', examples=['NullValue']
    )
    message: Optional[str] = Field(
        None,
        description='The error message.',
        examples=['Family name must not be null'],
    )
    target: Optional[str] = Field(
        None, description='The error target.', examples=['familyName']
    )


class FailedPrecondition(BaseModel):
    code: Optional[str] = Field(None, description='The error code.', examples=['400'])
    details: Optional[List[ErrorDetails]] = None
    message: Optional[str] = Field(
        None,
        description='The error message.',
        examples=['Request can not be executed in the current system state'],
    )
    status: Optional[str] = Field(
        None, description='The error status.', examples=['FAILED_PRECONDITION']
    )


class Gender1(Enum):
    Female = 'Female'
    Male = 'Male'
    Not_Applicable = 'Not Applicable'
    Not_Known = 'Not Known'


class AddressType1(Enum):
    Mailing = 'Mailing'
    Principal_Place_of_Business = 'Principal Place of Business'
    Principal_Place_of_Residence = 'Principal Place of Residence'


class Direction(Enum):
    left_to_right = 'left-to-right'
    right_to_left = 'right-to-left'


class NamePrefix(Enum):
    Mr = 'Mr'
    Ms = 'Ms'


class NameType(Enum):
    Alias = 'Alias'
    Principal_Name = 'Principal Name'


class InvalidArgument(BaseModel):
    code: Optional[str] = Field(None, description='The error code.', examples=['400'])
    details: Optional[List[ErrorDetails]] = None
    message: Optional[str] = Field(
        None,
        description='The error message.',
        examples=['The client specified an invalid argument'],
    )
    status: Optional[str] = Field(
        None, description='The error status.', examples=['INVALID_ARGUMENT']
    )


class LicenseType(Enum):
    Australian_Financial_Services_License = 'Australian Financial Services License'
    License_2B = 'License 2B'


class NotFound(BaseModel):
    code: Optional[str] = Field(None, description='The error code.', examples=['404'])
    details: Optional[List[ErrorDetails]] = None
    message: Optional[str] = Field(
        None,
        description='The error message.',
        examples=['The specified resource was not found'],
    )
    status: Optional[str] = Field(
        None, description='The error status.', examples=['NOT_FOUND']
    )


class LegalEntityType1(Enum):
    Company = 'Company'
    Partnership = 'Partnership'
    Trust = 'Trust'
    Joint_Venture = 'Joint Venture'


class AddressType2(Enum):
    Mailing = 'Mailing'
    Principal_Place_of_Business = 'Principal Place of Business'


class PartyRoleType(Enum):
    Director = 'Director'
    Employee = 'Employee'
    Member = 'Member'
    Partner = 'Partner'
    Trustee = 'Trustee'


class RelatedPartyRoleType(Enum):
    Association = 'Association'
    Company = 'Company'
    Employer = 'Employer'
    Organisation = 'Organisation'
    Partnership = 'Partnership'
    Trust = 'Trust'


class RelationshipType(Enum):
    Directorship = 'Directorship'
    Employment = 'Employment'
    Membership = 'Membership'
    Partnership = 'Partnership'
    Trusteeship = 'Trusteeship'


class PermissionDenied(BaseModel):
    code: Optional[str] = Field(None, description='The error code.', examples=['403'])
    details: Optional[List[ErrorDetails]] = None
    message: Optional[str] = Field(
        None,
        description='The error message.',
        examples=['The client does not have sufficient permission'],
    )
    status: Optional[str] = Field(
        None, description='The error status.', examples=['PERMISSION_DENIED']
    )


class IdentifierType(Enum):
    ACN = 'ACN'
    ABN = 'ABN'


class ResourceId(RootModel[constr(max_length=36)]):
    root: constr(max_length=36) = Field(
        ...,
        description='The resource ID. Defaults to UUID v4',
        examples=['123e4567-e89b-12d3-a456-426655440000'],
    )


class Role(BaseModel):
    id: Optional[ResourceId] = Field(
        None, description="The resource's unique identifier."
    )
    reciprocalRole: Optional[str] = Field(None, description='The reciprocal role name.')
    reciprocalRoleDescription: Optional[str] = Field(
        None, description='The reciprocal role description.'
    )
    relationship: Optional[str] = Field(None, description='The relationship name.')
    role: Optional[str] = Field(None, description='The role name.')
    roleDescription: Optional[str] = Field(None, description='The role description.')


class RoleId(BaseModel):
    pass


class Type(BaseModel):
    description: Optional[str] = Field(
        None, description='The scheme value description.'
    )
    id: Optional[ResourceId] = Field(
        None, description="The resource's unique identifier."
    )
    name: Optional[str] = Field(None, description='The scheme value.')


class Unauthenticated(BaseModel):
    code: Optional[str] = Field(None, description='The error code.', examples=['401'])
    details: Optional[ErrorDetails] = None
    message: Optional[str] = Field(
        None,
        description='The error message.',
        examples=[
            'Request not authenticated due to missing, invalid, or expired token'
        ],
    )
    status: Optional[str] = Field(
        None, description='The error status.', examples=['UNAUTHENTICATED']
    )


class ClassificationsRolesGetResponse(RootModel[List[Role]]):
    root: List[Role] = Field(
        ...,
        examples=[
            [
                {
                    'id': '123e4567-e89b-12d3-a456-426655440001',
                    'reciprocalRole': 'Company',
                    'reciprocalRoleDescription': 'An incorporated legal entity.',
                    'relationship': 'Directorship',
                    'role': 'Director',
                    'roleDescription': "An individual responsible for managing a company's business activities.",
                },
                {
                    'id': '123e4567-e89b-12d3-a456-426655440002',
                    'reciprocalRole': 'Employer',
                    'reciprocalRoleDescription': 'An individual or organisation that employs people.',
                    'relationship': 'Employment',
                    'role': 'Employee',
                    'roleDescription': 'An individual employed for wages or salary.',
                },
            ]
        ],
    )


AddressType = Type


class AddressId(BaseModel):
    pass


class BusinessName(BaseModel):
    fromDate: Optional[datetime] = Field(
        None,
        description='The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).',
        examples=['1979-01-13T09:05:06+10:00'],
    )
    id: Optional[ResourceId] = Field(
        None, description="The resource's unique identifier."
    )
    lifecycleState: Optional[LifecycleState] = Field(
        'Pending Approval', description="The business name's lifecycle state."
    )
    name: Optional[str] = Field(
        None, description='The business name.', examples=['XYZ Technology Ventures']
    )
    toDate: Optional[datetime] = Field(
        None,
        description='The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).',
        examples=[''],
    )


BusinessNameLifecycleState = Type


class ElectronicAddress(BaseModel):
    areaCode: Optional[str] = Field(
        None, description='The area code, for example, "02".', examples=['02']
    )
    countryPrefix: Optional[str] = Field(
        None, description='The country prefix, for example, "61".', examples=['61']
    )
    electronicAddressType: Optional[ElectronicAddressType] = Field(
        'Landline', description='The electronic address type.'
    )
    email: Optional[str] = Field(
        None,
        description='The email address, for example, "robert.ferguson@ato.gov.au".',
        examples=[''],
    )
    extension: Optional[str] = Field(
        None, description='The extension number, for example, "4453".', examples=['']
    )
    fromDate: Optional[datetime] = Field(
        None,
        description='The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).',
        examples=['1979-01-13T09:05:06+10:00'],
    )
    id: Optional[AddressId] = Field(
        None, description="The resource's unique identifier."
    )
    number: Optional[str] = Field(
        None, description='The number, for example, "62164453".', examples=['62164453']
    )
    toDate: Optional[datetime] = Field(
        None,
        description='The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).',
        examples=[''],
    )
    url: Optional[str] = Field(
        None,
        description='The website address, for example, "https://ato.gov.au".',
        examples=[''],
    )


ElectronicAddressType1 = Type


class Gender(BaseModel):
    gender: Optional[str] = Field(None, description='The gender.')
    id: Optional[ResourceId] = Field(
        None, description="The resource's unique identifier."
    )


class IndividualName(BaseModel):
    direction: Optional[Direction] = Field(
        'left-to-right',
        description="The direction used to render the individual's name.",
    )
    familyName: Optional[str] = Field(
        None, description="The individual's family name.", examples=['Ferguson']
    )
    formalSalutation: Optional[str] = Field(
        None,
        description='The individual\'s formal salutation, for example, "Mr William Smith".',
        examples=['Mr Robert Ferguson'],
    )
    fromDate: Optional[datetime] = Field(
        None,
        description='The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).',
        examples=['1979-01-13T09:05:06+10:00'],
    )
    givenName: Optional[str] = Field(
        None, description="The individual's given name.", examples=['Robert']
    )
    id: Optional[ResourceId] = Field(
        None, description="The resource's unique identifier."
    )
    informalSalutation: Optional[str] = Field(
        None,
        description='The individual\'s informal salutation, for example, "Bill".',
        examples=['Rob'],
    )
    middleName: Optional[str] = Field(
        None, description="The individual's middle name.", examples=['James']
    )
    namePrefix: Optional[NamePrefix] = Field(
        'Mr', description="The individual's name prefix."
    )
    nameSuffix: Optional[str] = Field(
        None,
        description='The individual\'s name suffix, for example, "Jr" or "Sr".',
        examples=[''],
    )
    nameType: Optional[NameType] = Field('Principal Name', description='The name type.')
    toDate: Optional[datetime] = Field(
        None,
        description='The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).',
        examples=[''],
    )


LegalEntityType = Type


class License(BaseModel):
    fromDate: Optional[datetime] = Field(
        None,
        description='The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).',
        examples=['1979-01-13T09:05:06+10:00'],
    )
    id: Optional[ResourceId] = Field(
        None, description="The resource's unique identifier."
    )
    licenseType: Optional[LicenseType] = Field(
        'Australian Financial Services License', description='The license type.'
    )
    lifecycleState: Optional[LifecycleState] = Field(
        'Pending Approval', description="The business name's lifecycle state."
    )
    toDate: Optional[datetime] = Field(
        None,
        description='The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).',
        examples=[''],
    )


LicenseLifecycleState = Type


LicenseType1 = Type


NameDirection = Type


NamePrefix1 = Type


NameType1 = Type


class OrganisationName(BaseModel):
    fromDate: Optional[datetime] = Field(
        None,
        description='The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).',
        examples=['1928-03-03T09:05:06+10:00'],
    )
    id: Optional[ResourceId] = Field(
        None, description="The resource's unique identifier."
    )
    name: Optional[str] = Field(
        None,
        description="The organisation's name.",
        examples=['321 Technology Ventures'],
    )
    toDate: Optional[datetime] = Field(
        None,
        description='The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).',
        examples=[''],
    )


class PartyId(BaseModel):
    pass


class RegisteredIdentifier(BaseModel):
    fromDate: Optional[datetime] = Field(
        None,
        description='The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).',
        examples=['1979-01-13T09:05:06+10:00'],
    )
    id: Optional[ResourceId] = Field(
        None, description="The resource's unique identifier."
    )
    identifier: Optional[str] = Field(
        None, description='The registered identifier.', examples=['123456789']
    )
    identifierType: Optional[IdentifierType] = Field(
        'ACN', description='The registered identifier type.'
    )
    toDate: Optional[datetime] = Field(
        None,
        description='The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).',
        examples=[''],
    )


RegisteredIdentifierType = Type


class BusinessNamesGetResponse(RootModel[List[BusinessName]]):
    root: List[BusinessName]


class ClassificationsAddressTypesGetResponse(RootModel[List[AddressType]]):
    root: List[AddressType] = Field(
        ...,
        examples=[
            [
                {
                    'description': 'The address at which an individual or organisation receives letters or packages.',
                    'id': '123e4567-e89b-12d3-a456-426655440001',
                    'name': 'Mailing',
                },
                {
                    'description': 'The main location where work is conducted.',
                    'id': '123e4567-e89b-12d3-a456-426655440002',
                    'name': 'Principal Place of Business',
                },
            ]
        ],
    )


class ClassificationsBusinessNameLifecycleStatesGetResponse(
    RootModel[List[BusinessNameLifecycleState]]
):
    root: List[BusinessNameLifecycleState] = Field(
        ...,
        examples=[
            [
                {
                    'description': 'The Business Name has been approved.',
                    'id': '123e4567-e89b-12d3-a456-426655440001',
                    'name': 'Approved',
                },
                {
                    'description': 'The Business Name has expired.',
                    'id': '123e4567-e89b-12d3-a456-426655440002',
                    'name': 'Expired',
                },
                {
                    'description': 'The Business Name has been issued.',
                    'id': '123e4567-e89b-12d3-a456-426655440003',
                    'name': 'Issued',
                },
                {
                    'description': 'The Business Name is pending approval.',
                    'id': '123e4567-e89b-12d3-a456-426655440004',
                    'name': 'Pending Approval',
                },
                {
                    'description': 'The Business Name has been suspended.',
                    'id': '123e4567-e89b-12d3-a456-426655440005',
                    'name': 'Suspended',
                },
            ]
        ],
    )


class ClassificationsElectronicAddressTypesGetResponse(
    RootModel[List[ElectronicAddressType1]]
):
    root: List[ElectronicAddressType1] = Field(
        ...,
        examples=[
            [
                {
                    'description': 'An address used to send and receive emails.',
                    'id': '123e4567-e89b-12d3-a456-426655440001',
                    'name': 'Email',
                },
                {
                    'description': 'A number used to send and receive faxes.',
                    'id': '123e4567-e89b-12d3-a456-426655440002',
                    'name': 'Fax',
                },
            ]
        ],
    )


class ClassificationsGendersGetResponse(RootModel[List[Gender]]):
    root: List[Gender] = Field(
        ...,
        examples=[
            [
                {'gender': 'Not Known', 'id': '123e4567-e89b-12d3-a456-426655440001'},
                {'gender': 'Male', 'id': '123e4567-e89b-12d3-a456-426655440002'},
                {'gender': 'Female', 'id': '123e4567-e89b-12d3-a456-426655440003'},
                {
                    'gender': 'Not Applicable',
                    'id': '123e4567-e89b-12d3-a456-426655440004',
                },
            ]
        ],
    )


class ClassificationsLegalEntityTypesGetResponse(RootModel[List[LegalEntityType]]):
    root: List[LegalEntityType] = Field(
        ...,
        examples=[
            [
                {
                    'description': "If you operate as a sole trader, you're responsible for all aspects of the business, including any debts the business incurs.",
                    'id': '123e4567-e89b-12d3-a456-426655440001',
                    'name': 'Sole Trader',
                },
                {
                    'description': 'A partnership is two or more individuals or organisations who do business as partners or receive income jointly.',
                    'id': '123e4567-e89b-12d3-a456-426655440002',
                    'name': 'Partnership',
                },
                {
                    'description': 'A joint venture is two or more people or entities who join to do business together for a particular purpose, usually a single project, rather than as an ongoing business.',
                    'id': '123e4567-e89b-12d3-a456-426655440003',
                    'name': 'Joint Venture',
                },
                {
                    'description': 'A company is a separate legal entity. This means it has the same rights as a natural person and can incur debt, sue and be sued.',
                    'id': '123e4567-e89b-12d3-a456-426655440004',
                    'name': 'Company',
                },
                {
                    'description': 'A trust is an obligation imposed on a person – the trustee – to hold property or assets (e.g. business assets) for the benefit of others (known as beneficiaries).',
                    'id': '123e4567-e89b-12d3-a456-426655440005',
                    'name': 'Trust',
                },
            ]
        ],
    )


class ClassificationsLicenseLifecycleStatesGetResponse(
    RootModel[List[LicenseLifecycleState]]
):
    root: List[LicenseLifecycleState] = Field(
        ...,
        examples=[
            [
                {
                    'description': 'The License has been approved.',
                    'id': '123e4567-e89b-12d3-a456-426655440001',
                    'name': 'Approved',
                },
                {
                    'description': 'The License has expired.',
                    'id': '123e4567-e89b-12d3-a456-426655440002',
                    'name': 'Expired',
                },
                {
                    'description': 'The License has been issued.',
                    'id': '123e4567-e89b-12d3-a456-426655440003',
                    'name': 'Issued',
                },
                {
                    'description': 'The License is pending approval.',
                    'id': '123e4567-e89b-12d3-a456-426655440004',
                    'name': 'Pending Approval',
                },
                {
                    'description': 'The License has been suspended.',
                    'id': '123e4567-e89b-12d3-a456-426655440005',
                    'name': 'Suspended',
                },
            ]
        ],
    )


class ClassificationsLicenseTypesGetResponse(RootModel[List[LicenseType1]]):
    root: List[LicenseType1] = Field(
        ...,
        examples=[
            [
                {
                    'description': 'To conduct a financial services business in Australia, you must have an Australian Financial Services (AFS) licence.',
                    'id': '123e4567-e89b-12d3-a456-426655440001',
                    'name': 'Australian Financial Services License',
                },
                {
                    'description': 'To conduct a <insert-name-here> business you must have a 2B licence.',
                    'id': '123e4567-e89b-12d3-a456-426655440002',
                    'name': '2B License',
                },
            ]
        ],
    )


class ClassificationsNameDirectionsGetResponse(RootModel[List[NameDirection]]):
    root: List[NameDirection] = Field(
        ...,
        examples=[
            [
                {
                    'description': 'The full name or formal salutation is rendered left to right.',
                    'id': '123e4567-e89b-12d3-a456-426655440001',
                    'name': 'left-to-right',
                },
                {
                    'description': 'The full name or formal salutation is rendered right to left.',
                    'id': '123e4567-e89b-12d3-a456-426655440002',
                    'name': 'right-to-left',
                },
            ]
        ],
    )


class ClassificationsNamePrefixesGetResponse(RootModel[List[NamePrefix1]]):
    root: List[NamePrefix1] = Field(
        ...,
        examples=[
            [
                {
                    'description': 'A title used before a family name or formal salutation to address a man.',
                    'id': '123e4567-e89b-12d3-a456-426655440001',
                    'name': 'Mr',
                },
                {
                    'description': 'A title used before a family name or formal salutation to address a woman.',
                    'id': '123e4567-e89b-12d3-a456-426655440002',
                    'name': 'Ms',
                },
            ]
        ],
    )


class ClassificationsNameTypesGetResponse(RootModel[List[NameType1]]):
    root: List[NameType1] = Field(
        ...,
        examples=[
            [
                {
                    'description': 'An alternate name used by a party.',
                    'id': '123e4567-e89b-12d3-a456-426655440001',
                    'name': 'Alias',
                },
                {
                    'description': 'The primary name used by a party.',
                    'id': '123e4567-e89b-12d3-a456-426655440002',
                    'name': 'Principal Name',
                },
            ]
        ],
    )


class ClassificationsRegisteredIdentifierTypesGetResponse(
    RootModel[List[RegisteredIdentifierType]]
):
    root: List[RegisteredIdentifierType] = Field(
        ...,
        examples=[
            [
                {
                    'description': 'An Australian Business Number (ABN) is a unique eleven-character number issued by the Australian Business Register (ABR).',
                    'id': '123e4567-e89b-12d3-a456-426655440001',
                    'name': 'ABN',
                },
                {
                    'description': 'An Australian Company Number (ACN) is a unique nine-character number issued by the Australian Securities and Investments Commission (ASIC).',
                    'id': '123e4567-e89b-12d3-a456-426655440002',
                    'name': 'ACN',
                },
            ]
        ],
    )


class IndividualsPartyIdBusinessNamesGetResponse(RootModel[List[BusinessName]]):
    root: List[BusinessName]


class IndividualsPartyIdElectronicAddressesGetResponse(
    RootModel[List[ElectronicAddress]]
):
    root: List[ElectronicAddress]


class IndividualsPartyIdLicensesGetResponse(RootModel[List[License]]):
    root: List[License]


class LicensesGetResponse(RootModel[List[License]]):
    root: List[License]


class OrganisationsPartyIdBusinessNamesGetResponse(RootModel[List[BusinessName]]):
    root: List[BusinessName]


class OrganisationsPartyIdElectronicAddressesGetResponse(
    RootModel[List[ElectronicAddress]]
):
    root: List[ElectronicAddress]


class OrganisationsPartyIdLicensesGetResponse(RootModel[List[License]]):
    root: List[License]


class Address(BaseModel):
    city: Optional[str] = Field(None, description='The city.', examples=['Canberra'])
    country: Optional[str] = Field(
        None, description='The country.', examples=['Australia']
    )
    fromDate: Optional[datetime] = Field(
        None,
        description='The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).',
        examples=['1979-01-13T09:05:06+10:00'],
    )
    id: Optional[AddressId] = Field(
        None, description="The resource's unique identifier."
    )
    line1: Optional[str] = Field(
        None, description='The address line 1.', examples=['Level 7']
    )
    line2: Optional[str] = Field(
        None, description='The address line 2.', examples=['21 Genge Street']
    )
    line3: Optional[str] = Field(None, description='The address line 3.', examples=[''])
    name: Optional[str] = Field(
        None, description='The address name.', examples=['Kembery Building']
    )
    postalCode: Optional[str] = Field(
        None, description='The postal code.', examples=['2601']
    )
    suburb: Optional[str] = Field(None, description='The suburb.', examples=['Civic'])
    toDate: Optional[datetime] = Field(
        None,
        description='The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).',
        examples=[''],
    )


class IndividualAddress(Address):
    addressType: Optional[AddressType1] = Field(
        'Principal Place of Residence', description='The address type.'
    )
    fromDate: Optional[datetime] = Field(
        None,
        description='The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).',
        examples=['1979-01-13T09:05:06+10:00'],
    )
    toDate: Optional[datetime] = Field(
        None,
        description='The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).',
        examples=[''],
    )


class OrganisationAddress(Address):
    addressType: Optional[AddressType2] = Field(
        'Principal Place of Business', description='The address type.'
    )
    fromDate: Optional[datetime] = Field(
        None,
        description='The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).',
        examples=['1979-01-13T09:05:06+10:00'],
    )
    toDate: Optional[datetime] = Field(
        None,
        description='The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).',
        examples=[''],
    )


class PartyRole(BaseModel):
    fromDate: Optional[datetime] = Field(
        None,
        description='The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).',
        examples=['2016-01-13T09:05:06+10:00'],
    )
    id: Optional[RoleId] = Field(None, description="The resource's unique identifier.")
    partyRoleType: Optional[PartyRoleType] = Field(
        'Employee', description="The party's role type."
    )
    relatedPartyId: PartyId = Field(
        ..., description="The related party's unique identifier."
    )
    relatedPartyRoleType: Optional[RelatedPartyRoleType] = Field(
        'Employer', description="The related party's role type."
    )
    relationshipType: RelationshipType = Field(
        ..., description='The relationship type.'
    )
    toDate: Optional[datetime] = Field(
        None,
        description='The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).',
        examples=[''],
    )


class IndividualsPartyIdAddressesGetResponse(RootModel[List[Address]]):
    root: List[Address]


class IndividualsPartyIdRolesGetResponse(RootModel[List[PartyRole]]):
    root: List[PartyRole]


class OrganisationsPartyIdAddressesGetResponse(RootModel[List[Address]]):
    root: List[Address]


class OrganisationsPartyIdRolesGetResponse(RootModel[List[PartyRole]]):
    root: List[PartyRole]


class Individual(BaseModel):
    addresses: Optional[List[IndividualAddress]] = None
    dateOfBirth: date = Field(
        ...,
        description="The individual's date of birth, for example, `1979-01-13` (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format).",
        examples=['1979-01-13'],
    )
    electronicAddresses: Optional[List[ElectronicAddress]] = None
    fromDate: Optional[datetime] = Field(
        None,
        description='The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).',
        examples=['1979-01-13T09:05:06+10:00'],
    )
    gender: Optional[Gender1] = Field('Male', description="The individual's gender.")
    id: Optional[PartyId] = Field(None, description="The party's unique identifier.")
    names: Optional[List[IndividualName]] = None
    placeOfBirth: str = Field(
        ...,
        description="The individual's place of birth, for example, `Tamworth`.",
        examples=['Tamworth'],
    )
    toDate: Optional[datetime] = Field(
        None,
        description='The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).',
        examples=[''],
    )


class Organisation(BaseModel):
    addresses: Optional[List[OrganisationAddress]] = None
    electronicAddresses: Optional[List[ElectronicAddress]] = None
    establishmentDate: date = Field(
        ...,
        description="The organisation's establishment date, for example, `1928-03-03` (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format).",
        examples=['1928-03-03'],
    )
    fromDate: Optional[datetime] = Field(
        None,
        description='The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).',
        examples=['1979-01-13T09:05:06+10:00'],
    )
    id: Optional[PartyId] = Field(None, description="The party's unique identifier.")
    legalEntityType: LegalEntityType1 = Field(
        ..., description="The organisation's legal entity type."
    )
    names: Optional[List[OrganisationName]] = None
    registeredIdentifiers: Optional[List[RegisteredIdentifier]] = None
    toDate: Optional[datetime] = Field(
        None,
        description='The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).',
        examples=[''],
    )


class IndividualsGetResponse(RootModel[List[Individual]]):
    root: List[Individual]


class OrganisationsGetResponse(RootModel[List[Organisation]]):
    root: List[Organisation]
