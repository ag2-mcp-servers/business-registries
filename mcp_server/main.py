# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T16:10:11+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Header, Path, Query

from models import (
    Address,
    BusinessName,
    BusinessNamesGetResponse,
    ClassificationsAddressTypesGetResponse,
    ClassificationsBusinessNameLifecycleStatesGetResponse,
    ClassificationsElectronicAddressTypesGetResponse,
    ClassificationsGendersGetResponse,
    ClassificationsLegalEntityTypesGetResponse,
    ClassificationsLicenseLifecycleStatesGetResponse,
    ClassificationsLicenseTypesGetResponse,
    ClassificationsNameDirectionsGetResponse,
    ClassificationsNamePrefixesGetResponse,
    ClassificationsNameTypesGetResponse,
    ClassificationsRegisteredIdentifierTypesGetResponse,
    ClassificationsRolesGetResponse,
    ElectronicAddress,
    FailedPrecondition,
    Individual,
    IndividualsGetResponse,
    IndividualsPartyIdAddressesGetResponse,
    IndividualsPartyIdBusinessNamesGetResponse,
    IndividualsPartyIdElectronicAddressesGetResponse,
    IndividualsPartyIdLicensesGetResponse,
    IndividualsPartyIdRolesGetResponse,
    InvalidArgument,
    License,
    LicensesGetResponse,
    NotFound,
    Organisation,
    OrganisationsGetResponse,
    OrganisationsPartyIdAddressesGetResponse,
    OrganisationsPartyIdBusinessNamesGetResponse,
    OrganisationsPartyIdElectronicAddressesGetResponse,
    OrganisationsPartyIdLicensesGetResponse,
    OrganisationsPartyIdRolesGetResponse,
    PartyRole,
    Unauthenticated,
)

app = MCPProxy(
    description='# Introduction\nThe Business Registries API is built on HTTP. The API is RESTful. It has predictable resource URIs.\n\n  The API is documented in <a target="_blank" href="https://github.com/OAI/OpenAPI-Specification">OpenAPI</a> format.\n  In addition to the standard OpenAPI syntax we use a few\n  <a target="_blank" href="https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md">vendor extensions</a>.\n\n# Overview\nThe following sections describe the resources that make up the Business Registries REST API.\n## Current Version\nBy default, all requests to https://api.abr.ato.gov.au receive the `v1` version of the REST API. We encourage you to explicitly request this version via the `Accept` header.\n\n    Accept: application/vnd.abr-ato.v1+json\n\n## Schema\nAll API access is over HTTPS, and accessed from https://api.abr.ato.gov.au. All data is sent and received as JSON. Blank fields are included.\n\n  All dates use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:\n\n    YYYY-MM-DD\n\n  For example: `2017-07-01` (the 1st of July 2017)\n\n  All timestamps use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:\n\n    YYYY-MM-DDTHH:MM:SSZ\n\n  For example: `2017-07-01T11:05:06+10:00`\n\n## Timezones\nSome requests allow for specifying timestamps or generate timestamps with time zone information. We apply the following rules, in order of priority, to determine timezone information for API calls.\n### Explicitly provide an ISO 8601 timestamp with timezone information\nFor API calls that allow for a timestamp to be specified, we use that exact timestamp.\n\n  For example: `2017-07-01T11:05:06+10:00`\n\n## Pagination\nInformation about pagination is provided in the [Link](https://tools.ietf.org/html/rfc5988#page-6) header.\n\n  For example:\n\n    Link: <https://api.abr.ato.gov.au/individuals?page=2>; rel="next",\n          <https://api.abr.ato.gov.au/individuals?page=34>; rel="last"\n\n`rel="next"` states that the next page is `page=2`. This makes sense, since by default, all paginated queries start at page `1`. `rel="last"` provides some more information, stating that the last page of results is on `page 34`. Accordingly, we have 33 more pages of information that we can consume.\n## Parameters\nMany API methods take optional parameters:\n\n    GET /individuals/1234/addresses/?addressType=\'Mailing\'\n\nIn this example, the \'1234\' value is provided for the `:partyId` parameter in the path while `:addressType` is passed in the query string.\nFor POST, PATCH, PUT, and DELETE requests, parameters not included in the URL should be encoded as JSON with a Content-Type of \'application/json\'.\n## Metadata\nThe API provides **metadata services** that you can use to discover information about the classifcation schemes and values used by the Registry.\n\n  For example:\n\n    GET /classifications/roles\n\n  Sample response:\n\n    [\n      {\n        "id": "123e4567-e89b-12d3-a456-426655440001",\n        "role": "Director",\n        "roleDescription": "An individual responsible for managing a company\'s ...",\n        "relationship": "Directorship",\n        "reciprocalRole": "Company",\n        "reciprocalRoleDescription": "An incorporated legal entity."\n      },\n      {\n        ...\n      }\n    ]\n\n## Root Endpoint\nYou can issue a GET request to the root endpoint (also known as the service root) to get all the endpoint categories that the REST API supports:\n\n    curl https://api.abr.ato.gov.au\n\n## Authentication\nThe Business Registries API supports API Key authentication.\n\n  When you sign up for an account, you are given your first API key. You can generate additional API keys, and delete\n  API keys (as you may need to rotate your keys in the future). You authenticate to the Business Registries API by\n  providing your secret key in the request header.\n\n  **Note:** Some requests will return `404 Not Found`, instead of `403 Permission Denied`. This is to prevent the\n  accidental leakage of information to unauthorised users.\n',
    license={
        'name': 'Creative Commons Attribution 3.0 Australia',
        'url': 'https://creativecommons.org/licenses/by/3.0/au/',
    },
    termsOfService='https://ato.gov.au/terms-of-service/',
    title='Business Registries',
    version='0.0.6',
    servers=[
        {'description': 'Production API Server', 'url': '//api.abr.ato.gov.au/'},
        {'description': 'Sandbox API Server', 'url': '//api.sandbox.abr.ato.gov.au/'},
    ],
)


@app.get(
    '/business-names',
    description=""" Retrieve a list of business names
 """,
    tags=[
        'business_name_management',
        'organisation_management',
        'classification_retrieval',
    ],
)
def get_business_names(api_key: str = Header(..., alias='apiKey')):
    """
    Retrieve a list of business names
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/classifications/address-types',
    tags=['classification_retrieval', 'address_management'],
)
def get_classifications_address_types(api_key: str = Header(..., alias='apiKey')):
    """
    Retrieve a list of address types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/classifications/business-name-lifecycle-states',
    tags=['business_name_management', 'classification_retrieval'],
)
def get_classifications_business_name_lifecycle_states(
    api_key: str = Header(..., alias='apiKey')
):
    """
    Retrieve a list of business name lifecycle states
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/classifications/electronic-address-types',
    tags=['classification_retrieval', 'electronic_address_management'],
)
def get_classifications_electronic_address_types(
    api_key: str = Header(..., alias='apiKey')
):
    """
    Retrieve a list of electronic address types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/classifications/genders', tags=['classification_retrieval'])
def get_classifications_genders(api_key: str = Header(..., alias='apiKey')):
    """
    Retrieve a list of genders
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/classifications/legal-entity-types', tags=['classification_retrieval'])
def get_classifications_legal_entity_types(api_key: str = Header(..., alias='apiKey')):
    """
    Retrieve a list of legal entity types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/classifications/license-lifecycle-states', tags=['license_management'])
def get_classifications_license_lifecycle_states(
    api_key: str = Header(..., alias='apiKey')
):
    """
    Retrieve a list of license lifecycle states
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/classifications/license-types',
    tags=['license_management', 'classification_retrieval'],
)
def get_classifications_license_types(api_key: str = Header(..., alias='apiKey')):
    """
    Retrieve a list of license types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/classifications/name-directions', tags=['classification_retrieval'])
def get_classifications_name_directions(api_key: str = Header(..., alias='apiKey')):
    """
    Retrieve a list of name directions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/classifications/name-prefixes', tags=['classification_retrieval'])
def get_classifications_name_prefixes(api_key: str = Header(..., alias='apiKey')):
    """
    Retrieve a list of name prefixes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/classifications/name-types', tags=['classification_retrieval'])
def get_classifications_name_types(api_key: str = Header(..., alias='apiKey')):
    """
    Retrieve a list of name types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/classifications/registered-identifier-types', tags=['classification_retrieval']
)
def get_classifications_registered_identifier_types(
    api_key: str = Header(..., alias='apiKey')
):
    """
    Retrieve a list of registered identifier types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/classifications/roles', tags=['classification_retrieval', 'role_management'])
def get_classifications_roles(api_key: str = Header(..., alias='apiKey')):
    """
    Retrieve a list of roles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/individuals',
    description=""" Retrieve a list of individuals
 """,
    tags=['individual_management'],
)
def get_individuals(
    api_key: str = Header(..., alias='apiKey'),
    date_of_birth: Optional[str] = Query(None, alias='dateOfBirth'),
    place_of_birth: Optional[str] = Query(None, alias='placeOfBirth'),
):
    """
    Retrieve a list of individuals
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/individuals',
    description=""" Create an individual
 """,
    tags=['individual_management'],
)
def post_individuals(
    api_key: str = Header(..., alias='apiKey'), body: Individual = ...
):
    """
    Create an individual
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/individuals/{partyId}',
    description=""" Delete an individual with the specified identifier
 """,
    tags=['individual_management'],
)
def delete_individuals__party_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
):
    """
    Delete an individual
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/individuals/{partyId}',
    description=""" Retrieve an individual with the specified identifier
 """,
    tags=['individual_management'],
)
def get_individuals__party_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
):
    """
    Retrieve an individual
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/individuals/{partyId}',
    description=""" Update an individual
 """,
    tags=['individual_management'],
)
def put_individuals__party_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    body: Individual = ...,
):
    """
    Update an individual
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/individuals/{partyId}/addresses',
    tags=['individual_address_retrieval', 'address_management'],
)
def get_individuals__party_id_addresses(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
):
    """
    Retrieve a list of addresses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/individuals/{partyId}/addresses',
    description=""" Create an address
 """,
    tags=['address_management', 'individual_management'],
)
def post_individuals__party_id_addresses(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    body: Address = ...,
):
    """
    Create an address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/individuals/{partyId}/addresses/{addressId}',
    description=""" Delete an address
 """,
    tags=['address_management', 'individual_management'],
)
def delete_individuals__party_id_addresses__address_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    address_id: str = Path(..., alias='addressId'),
):
    """
    Delete an address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/individuals/{partyId}/addresses/{addressId}',
    description=""" Retrieve an address
 """,
    tags=['individual_address_retrieval', 'address_management'],
)
def get_individuals__party_id_addresses__address_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    address_id: str = Path(..., alias='addressId'),
):
    """
    Retrieve an address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/individuals/{partyId}/addresses/{addressId}',
    description=""" Update an address
 """,
    tags=['address_management', 'individual_management'],
)
def put_individuals__party_id_addresses__address_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    address_id: str = Path(..., alias='addressId'),
    body: Address = ...,
):
    """
    Update an address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/individuals/{partyId}/business-names',
    tags=[
        'business_name_management',
        'individual_management',
        'classification_retrieval',
        'organisation_management',
    ],
)
def get_individuals__party_id_business_names(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
):
    """
    Retrieve a list of business names
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/individuals/{partyId}/business-names',
    description=""" Create a business name
 """,
    tags=[
        'business_name_management',
        'individual_management',
        'organisation_management',
    ],
)
def post_individuals__party_id_business_names(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    body: BusinessName = ...,
):
    """
    Create a business name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/individuals/{partyId}/business-names/{productId}',
    description=""" Delete a business name
 """,
    tags=['business_name_management', 'individual_management'],
)
def delete_individuals__party_id_business_names__product_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    product_id: str = Path(..., alias='productId'),
):
    """
    Delete a business name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/individuals/{partyId}/business-names/{productId}',
    description=""" Retrieve a business name
 """,
    tags=[
        'business_name_management',
        'individual_management',
        'classification_retrieval',
    ],
)
def get_individuals__party_id_business_names__product_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    product_id: str = Path(..., alias='productId'),
):
    """
    Retrieve a business name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/individuals/{partyId}/business-names/{productId}',
    description=""" Update a business name
 """,
    tags=[
        'business_name_management',
        'individual_management',
        'organisation_management',
    ],
)
def put_individuals__party_id_business_names__product_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    product_id: str = Path(..., alias='productId'),
    body: BusinessName = ...,
):
    """
    Update a business name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/individuals/{partyId}/electronic-addresses',
    tags=['electronic_address_management', 'individual_address_retrieval'],
)
def get_individuals__party_id_electronic_addresses(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
):
    """
    Retrieve a list of electronic addresses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/individuals/{partyId}/electronic-addresses',
    description=""" Create an electronic address
 """,
    tags=['electronic_address_management'],
)
def post_individuals__party_id_electronic_addresses(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    body: ElectronicAddress = ...,
):
    """
    Create an electronic address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/individuals/{partyId}/electronic-addresses/{addressId}',
    description=""" Delete an electronic address
 """,
    tags=['address_management', 'electronic_address_management'],
)
def delete_individuals__party_id_electronic_addresses__address_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    address_id: str = Path(..., alias='addressId'),
):
    """
    Delete an electronic address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/individuals/{partyId}/electronic-addresses/{addressId}',
    description=""" Retrieve an electronic address
 """,
    tags=['electronic_address_management', 'individual_address_retrieval'],
)
def get_individuals__party_id_electronic_addresses__address_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    address_id: str = Path(..., alias='addressId'),
):
    """
    Retrieve an electronic address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/individuals/{partyId}/electronic-addresses/{addressId}',
    description=""" Update an electronic address
 """,
    tags=['electronic_address_management', 'address_management'],
)
def put_individuals__party_id_electronic_addresses__address_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    address_id: str = Path(..., alias='addressId'),
    body: ElectronicAddress = ...,
):
    """
    Update an electronic address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/individuals/{partyId}/licenses', tags=['license_management'])
def get_individuals__party_id_licenses(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
):
    """
    Retrieve a list of licenses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/individuals/{partyId}/licenses',
    description=""" Create a license
 """,
    tags=['license_management'],
)
def post_individuals__party_id_licenses(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    body: License = ...,
):
    """
    Create a license
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/individuals/{partyId}/licenses/{productId}',
    description=""" Delete a license
 """,
    tags=['license_management'],
)
def delete_individuals__party_id_licenses__product_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    product_id: str = Path(..., alias='productId'),
):
    """
    Delete a license
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/individuals/{partyId}/licenses/{productId}',
    description=""" Retrieve a license
 """,
    tags=['license_management'],
)
def get_individuals__party_id_licenses__product_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    product_id: str = Path(..., alias='productId'),
):
    """
    Retrieve a license
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/individuals/{partyId}/licenses/{productId}',
    description=""" Update a license
 """,
    tags=['license_management'],
)
def put_individuals__party_id_licenses__product_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    product_id: str = Path(..., alias='productId'),
    body: License = ...,
):
    """
    Update a license
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/individuals/{partyId}/roles', tags=['classification_retrieval', 'role_management']
)
def get_individuals__party_id_roles(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
):
    """
    Retrieve a list of roles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/individuals/{partyId}/roles',
    description=""" Create a role
 """,
    tags=['role_management'],
)
def post_individuals__party_id_roles(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    body: PartyRole = ...,
):
    """
    Create a role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/individuals/{partyId}/roles/{roleId}',
    description=""" Delete a role
 """,
    tags=['role_management'],
)
def delete_individuals__party_id_roles__role_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    role_id: str = Path(..., alias='roleId'),
):
    """
    Delete a role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/individuals/{partyId}/roles/{roleId}',
    description=""" Retrieve a role
 """,
    tags=['role_management', 'classification_retrieval'],
)
def get_individuals__party_id_roles__role_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    role_id: str = Path(..., alias='roleId'),
):
    """
    Retrieve a role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/individuals/{partyId}/roles/{roleId}',
    description=""" Update a role
 """,
    tags=['role_management'],
)
def put_individuals__party_id_roles__role_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    role_id: str = Path(..., alias='roleId'),
    body: PartyRole = ...,
):
    """
    Update a role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/licenses',
    description=""" Retrieve a list of licenses
 """,
    tags=['license_management'],
)
def get_licenses(api_key: str = Header(..., alias='apiKey')):
    """
    Retrieve a list of licenses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organisations',
    description=""" Retrieve a list of organisations
 """,
    tags=['organisation_management'],
)
def get_organisations(
    api_key: str = Header(..., alias='apiKey'),
    registered_identifier: Optional[str] = Query(None, alias='registeredIdentifier'),
    identifier: Optional[str] = None,
):
    """
    Retrieve a list of organisations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/organisations',
    description=""" Create an organisation
 """,
    tags=['organisation_management'],
)
def post_organisations(
    api_key: str = Header(..., alias='apiKey'), body: Organisation = ...
):
    """
    Create an organisation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/organisations/{partyId}',
    description=""" Delete an organisation with the specified identifier
 """,
    tags=['organisation_management'],
)
def delete_organisations__party_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
):
    """
    Delete an organisation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organisations/{partyId}',
    description=""" Retrieve an organisation with the specified identifier
 """,
    tags=['organisation_management'],
)
def get_organisations__party_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
):
    """
    Retrieve an organisation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/organisations/{partyId}',
    description=""" Update an organisation
 """,
    tags=['organisation_management'],
)
def put_organisations__party_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    body: Organisation = ...,
):
    """
    Update an organisation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organisations/{partyId}/addresses',
    tags=['individual_address_retrieval', 'address_management'],
)
def get_organisations__party_id_addresses(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
):
    """
    Retrieve a list of addresses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/organisations/{partyId}/addresses',
    description=""" Create an address
 """,
    tags=['address_management', 'individual_management'],
)
def post_organisations__party_id_addresses(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    body: Address = ...,
):
    """
    Create an address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/organisations/{partyId}/addresses/{addressId}',
    description=""" Delete an address
 """,
    tags=['address_management', 'individual_management'],
)
def delete_organisations__party_id_addresses__address_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    address_id: str = Path(..., alias='addressId'),
):
    """
    Delete an address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organisations/{partyId}/addresses/{addressId}',
    description=""" Retrieve an address
 """,
    tags=['individual_address_retrieval', 'address_management'],
)
def get_organisations__party_id_addresses__address_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    address_id: str = Path(..., alias='addressId'),
):
    """
    Retrieve an address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/organisations/{partyId}/addresses/{addressId}',
    description=""" Update an address
 """,
    tags=['address_management', 'individual_management'],
)
def put_organisations__party_id_addresses__address_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    address_id: str = Path(..., alias='addressId'),
    body: Address = ...,
):
    """
    Update an address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organisations/{partyId}/business-names',
    tags=[
        'business_name_management',
        'organisation_management',
        'classification_retrieval',
    ],
)
def get_organisations__party_id_business_names(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
):
    """
    Retrieve a list of business names
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/organisations/{partyId}/business-names',
    description=""" Create a business name
 """,
    tags=[
        'business_name_management',
        'individual_management',
        'organisation_management',
    ],
)
def post_organisations__party_id_business_names(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    body: BusinessName = ...,
):
    """
    Create a business name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/organisations/{partyId}/business-names/{productId}',
    description=""" Delete a business name
 """,
    tags=['business_name_management', 'individual_management'],
)
def delete_organisations__party_id_business_names__product_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    product_id: str = Path(..., alias='productId'),
):
    """
    Delete a business name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organisations/{partyId}/business-names/{productId}',
    description=""" Retrieve a business name
 """,
    tags=[
        'business_name_management',
        'individual_management',
        'classification_retrieval',
    ],
)
def get_organisations__party_id_business_names__product_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    product_id: str = Path(..., alias='productId'),
):
    """
    Retrieve a business name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/organisations/{partyId}/business-names/{productId}',
    description=""" Update a business name
 """,
    tags=['business_name_management', 'individual_management'],
)
def put_organisations__party_id_business_names__product_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    product_id: str = Path(..., alias='productId'),
    body: BusinessName = ...,
):
    """
    Update a business name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organisations/{partyId}/electronic-addresses',
    tags=['electronic_address_management', 'individual_address_retrieval'],
)
def get_organisations__party_id_electronic_addresses(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
):
    """
    Retrieve a list of electronic addresses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/organisations/{partyId}/electronic-addresses',
    description=""" Create an electronic address
 """,
    tags=['electronic_address_management'],
)
def post_organisations__party_id_electronic_addresses(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    body: ElectronicAddress = ...,
):
    """
    Create an electronic address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/organisations/{partyId}/electronic-addresses/{addressId}',
    description=""" Delete an electronic address
 """,
    tags=['electronic_address_management', 'address_management'],
)
def delete_organisations__party_id_electronic_addresses__address_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    address_id: str = Path(..., alias='addressId'),
):
    """
    Delete an electronic address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organisations/{partyId}/electronic-addresses/{addressId}',
    description=""" Retrieve an electronic address
 """,
    tags=['electronic_address_management', 'individual_address_retrieval'],
)
def get_organisations__party_id_electronic_addresses__address_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    address_id: str = Path(..., alias='addressId'),
):
    """
    Retrieve an electronic address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/organisations/{partyId}/electronic-addresses/{addressId}',
    description=""" Update an electronic address
 """,
    tags=['electronic_address_management', 'address_management'],
)
def put_organisations__party_id_electronic_addresses__address_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    address_id: str = Path(..., alias='addressId'),
    body: ElectronicAddress = ...,
):
    """
    Update an electronic address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/organisations/{partyId}/licenses', tags=['license_management'])
def get_organisations__party_id_licenses(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
):
    """
    Retrieve a list of licenses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/organisations/{partyId}/licenses',
    description=""" Create a license
 """,
    tags=['license_management'],
)
def post_organisations__party_id_licenses(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    body: License = ...,
):
    """
    Create a license
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/organisations/{partyId}/licenses/{productId}',
    description=""" Delete a license
 """,
    tags=['license_management'],
)
def delete_organisations__party_id_licenses__product_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    product_id: str = Path(..., alias='productId'),
):
    """
    Delete a license
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organisations/{partyId}/licenses/{productId}',
    description=""" Retrieve a license
 """,
    tags=['license_management'],
)
def get_organisations__party_id_licenses__product_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    product_id: str = Path(..., alias='productId'),
):
    """
    Retrieve a license
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/organisations/{partyId}/licenses/{productId}',
    description=""" Update a license
 """,
    tags=['license_management'],
)
def put_organisations__party_id_licenses__product_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    product_id: str = Path(..., alias='productId'),
    body: License = ...,
):
    """
    Update a license
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organisations/{partyId}/roles',
    tags=['classification_retrieval', 'role_management'],
)
def get_organisations__party_id_roles(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
):
    """
    Retrieve a list of roles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/organisations/{partyId}/roles',
    description=""" Create a role
 """,
    tags=['role_management'],
)
def post_organisations__party_id_roles(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    body: PartyRole = ...,
):
    """
    Create a role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/organisations/{partyId}/roles/{roleId}',
    description=""" Delete a role
 """,
    tags=['role_management'],
)
def delete_organisations__party_id_roles__role_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    role_id: str = Path(..., alias='roleId'),
):
    """
    Delete a role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organisations/{partyId}/roles/{roleId}',
    description=""" Retrieve a role
 """,
    tags=['role_management', 'classification_retrieval'],
)
def get_organisations__party_id_roles__role_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    role_id: str = Path(..., alias='roleId'),
):
    """
    Retrieve a role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/organisations/{partyId}/roles/{roleId}',
    description=""" Update a role
 """,
    tags=['role_management'],
)
def put_organisations__party_id_roles__role_id(
    api_key: str = Header(..., alias='apiKey'),
    party_id: str = Path(..., alias='partyId'),
    role_id: str = Path(..., alias='roleId'),
    body: PartyRole = ...,
):
    """
    Update a role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
